name: PCDS2030 Dashboard CI

on:
  push:
    branches: [ main, develop ]  # Only run on main and develop branch pushes
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.1, 8.2]
        node-version: [18, 20]

    name: Test PHP ${{ matrix.php-version }} & Node ${{ matrix.node-version }}

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up PHP environment
      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, hash, json, libxml, openssl, pcre, session, tokenizer, zip
          ini-values: post_max_size=256M, max_execution_time=180
          coverage: xdebug
          tools: composer:v2

      # Cache Composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            php-${{ matrix.php-version }}-composer-

      # Install PHP dependencies
      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

      # Set up Node.js environment
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Install Node.js dependencies
      - name: Install NPM dependencies
        run: npm ci

      - name: Fix phpunit permissions
        run: chmod +x vendor/bin/phpunit

      # Run PHPUnit tests
      - name: Run PHPUnit tests
        run: |
          echo "Running PHP backend tests..."
          vendor/bin/phpunit --testdox

      # Run Jest tests
      - name: Run Jest tests
        run: |
          echo "Running JavaScript frontend tests..."
          npm test

      # Build assets with Vite
      - name: Build assets
        run: |
          echo "Building production assets..."
          npm run build

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.php-version == '8.2' && matrix.node-version == '20'
        with:
          name: build-artifacts
          path: |
            dist/
            vendor/
          retention-days: 7

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, hash, json, libxml, openssl, pcre, session, tokenizer, zip
          tools: composer:v2

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: |
          composer install --prefer-dist --no-progress --optimize-autoloader
          npm ci

      # Check for PHP syntax errors
      - name: Check PHP syntax
        run: |
          echo "Checking PHP syntax..."
          ERROR_COUNT=0
          for file in $(find app/ -name "*.php"); do
            if ! php -l "$file" > /dev/null 2>&1; then
              echo "❌ Syntax error in: $file"
              php -l "$file"
              ERROR_COUNT=$((ERROR_COUNT + 1))
            fi
          done
          
          if [ $ERROR_COUNT -eq 0 ]; then
            echo "✅ All PHP files have valid syntax"
          else
            echo "❌ Found $ERROR_COUNT PHP syntax errors"
            exit 1
          fi

      # Check JavaScript/TypeScript syntax with ESLint (if configured)
      - name: Check JavaScript syntax
        run: |
          echo "Checking JavaScript syntax..."
          npx eslint assets/js/ --ext .js || echo "ESLint not configured, skipping..."

      # Security audit for Node.js dependencies
      - name: NPM Security Audit
        run: |
          echo "Running NPM security audit..."
          npm audit --audit-level=moderate || true

      # Check for outdated packages
      - name: Check outdated packages
        run: |
          echo "Checking for outdated NPM packages..."
          npm outdated || true
          echo "Checking for outdated Composer packages..."
          composer outdated || true

  documentation:
    runs-on: ubuntu-latest
    name: Documentation & Project Health

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check project documentation
        run: |
          echo "Checking project documentation..."
          
          # Check if important documentation files exist
          files=("README.md" "docs/project_structure_best_practices.md" "docs/bugs_tracker.md")
          for file in "${files[@]}"; do
            if [ -f "$file" ]; then
              echo "✓ $file exists"
            else
              echo "✗ $file missing"
            fi
          done

      - name: Validate package.json and composer.json
        run: |
          echo "Validating package configuration files..."
          
          # Validate package.json
          if [ -f "package.json" ]; then
            node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))" && echo "✓ package.json is valid JSON"
          fi
          
          # Validate composer.json
          if [ -f "composer.json" ]; then
            php -r "json_decode(file_get_contents('composer.json'), true, 512, JSON_THROW_ON_ERROR);" && echo "✓ composer.json is valid JSON"
          fi

      - name: Check file structure compliance
        run: |
          echo "Checking project structure compliance..."
          
          # Check if required directories exist
          directories=("app/lib" "app/views" "assets/css" "assets/js" "tests" "docs")
          for dir in "${directories[@]}"; do
            if [ -d "$dir" ]; then
              echo "✓ $dir exists"
            else
              echo "✗ $dir missing"
            fi
          done

  summary:
    runs-on: ubuntu-latest
    needs: [test, code-quality, documentation]
    name: Workflow Summary
    if: always()

    steps:
      - name: Workflow Summary
        run: |
          echo "## PCDS2030 Dashboard CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Job**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation**: ${{ needs.documentation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "🎉 **All checks passed!** The code is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some checks failed.** Please review the errors above." >> $GITHUB_STEP_SUMMARY
          fi
