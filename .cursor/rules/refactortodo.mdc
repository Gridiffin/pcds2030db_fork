---
alwaysApply: true
---
Provide project context and coding guidelines that AI should follow when generating code, answering questions, or reviewing changes.

# üöÄ Refactor Module Best Practices: To-Do Checklist

> **This file is the standard template/checklist for refactoring any module in this project. Whenever you see the instruction "refactor this module with best practices", use this as your context and workflow.**

---

## üìù To-Do Checklist: Refactor a Module (Detailed, with Vite & Unit Testing)
[Important Notes: DO NOT REMOVE ANY FUNCTIONS/SECTIONS WHILE REFACTORING OR MODULARIZING A LONG FILE]

### 1. **Preparation & Analysis**
- [ ] Identify all files related to the module (views, partials, CSS, JS, PHP logic, AJAX/API, tests).
- [ ] Map the data flow: controller/handler ‚Üí model/helper ‚Üí view ‚Üí assets.
- [ ] List all dynamic features that may require AJAX or modular JS.

---

### 2. **Directory & File Structure Planning**
- [ ] Plan the new structure:
  - Main view file in `app/views/[section]/[module].php`
  - Partials in `app/views/[section]/partials/`
  - CSS in `assets/css/[section]/[module].css` (with subfiles if needed)
  - JS in `assets/js/[section]/[module].js` (split logic/DOM as needed)
  - Pure logic in `assets/js/[section]/[module]Logic.js`
  - AJAX/API endpoints in `app/ajax/` or `app/api/`
  - Unit tests in `tests/[section]/[module]Logic.test.js`
- [ ] Create or update a base layout (e.g., `app/views/layouts/base.php`) for dynamic asset injection.

---

### 3. **Move & Refactor Files**
- [ ] Move view and partial files to the new structure.
- [ ] Move and modularize CSS:
  - Main CSS imports subfiles using `@import`.
  - Example: `@import 'login/form.css';`
  Note: compare all the css classes and the html classes, do not remove the css styles but modularize them accordingly.
- [ ] Move and modularize JS:
  - Separate pure logic (validation, helpers) from DOM/event/AJAX code.
  - Import logic JS before DOM JS in the view.
- [ ] Move reusable PHP logic to `lib/` (e.g., models, helpers).
- [ ] Move AJAX/API endpoints to `app/ajax/` or `app/api/` and ensure they return JSON only.

---

### 4. **Implement Vite for Asset Bundling**
- [ ] Create or update `vite.config.js`:
  - Define entry points for each module/page.
  - Example:
    ```js
    export default defineConfig({
      build: {
        rollupOptions: {
          input: {
            login: 'assets/js/admin/login.js',
            dashboard: 'assets/js/admin/dashboard.js',
            // Add more as needed
          },
          output: {
            entryFileNames: 'js/[name].bundle.js',
            assetFileNames: 'css/[name].bundle.css',
          }
        },
        outDir: 'dist',
        emptyOutDir: true,
      }
    });
    ```
- [ ] In each entry JS file, import the relevant CSS:
  ```js
  import '../../css/admin/login.css';
  ```
- [ ] Add build scripts to `package.json`:
  ```json
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  }
  ```
- [ ] Build assets for production:
  `npm run build`
- [ ] Reference bundled assets in your PHP views/layouts:
  ```php
  <link rel="stylesheet" href="/dist/js/login.bundle.css">
  <script src="/dist/js/login.bundle.js"></script>
  ```

---

### 5. **Refactor PHP Logic & Data Flow**
- [ ] Ensure all database operations are in models/helpers (`lib/`), not in views.
- [ ] Controllers/handlers fetch/process data and pass to views.
- [ ] Views only display data‚Äîno DB or business logic.

---

### 6. **AJAX & API Refactoring**
- [ ] AJAX endpoints return only data (JSON), not HTML.
- [ ] Write modular JS for AJAX in the relevant `assets/js/[section]/[module].js`.
- [ ] Use shared AJAX helpers if logic is reused across pages (e.g., `assets/js/ajax-helpers.js`).
- [ ] Handle errors gracefully in JS.

---

### 7. **Base Layout & Dynamic Asset Injection**
- [ ] Use a base layout (e.g., `layouts/base.php`) to inject per-page assets and content.
- [ ] Set `$cssBundle`, `$jsBundle`, `$contentFile` in each page and include the base layout.
- [ ] Add global assets in the base layout as needed.

---

### 8. **Unit Testing**
- [ ] Write or update unit tests for pure JS logic (e.g., `tests/admin/loginLogic.test.js`).
  - Example using Jest:
    ```js
    const { validateEmail, validatePassword } = require('../../assets/js/admin/loginLogic');
    test('valid email passes', () => {
      expect(validateEmail('test@example.com')).toBe(true);
    });
    ```
- [ ] Run tests and ensure all pass:
  `npm test`
- [ ] (Optional) Add PHP unit tests for backend logic if using PHPUnit.

---

### 9. **Validation & QA**
- [ ] Test all features and flows in the browser.
- [ ] Check for code duplication, unused files, and opportunities to modularize further.
- [ ] Ensure all code follows naming conventions and is well-documented.

---

### 10. **Documentation & Bug Tracking**
- [ ] Update `docs/project_structure_best_practices.md` with any new patterns or lessons learned.
- [ ] Log any bugs found/fixed in `docs/bugs_tracker.md`.

---

### 11. **Review & Optimize**
- [ ] Review the refactored module for maintainability, scalability, and performance.
- [ ] Optimize asset loading (load only what‚Äôs needed per page).
- [ ] Ensure security best practices are followed (e.g., input validation, output escaping).

---

## ‚≠êÔ∏è **Highlights & Usage**
- **This checklist is the gold standard for module refactoring in this project.**
- **Always use this as your context when you see the keyword:**
  > "refactor this module with best practices"
- **It covers:**
  - Modern file structure
  - Modular CSS/JS
  - Vite asset bundling
  - AJAX/API separation
  - Base layout usage
  - Unit testing
  - Documentation and bug tracking
- **Following this ensures maintainability, scalability, and professional quality.**

--- 

## Key Takeaways
This file is to be used as a reference and key takeaways so that no problems would occur twice.

## Problems & Solutions During Login Refactor

### 1. Asset Loading and 404 Errors
- **Problem:** 404 errors for old CSS/JS files (`login.css`, `login.bundle.js`, etc.) after refactoring and switching to Vite.
- **Cause:** Outdated references in HTML/PHP and `main.css` to deleted or moved files.
- **Solution:** Removed all old references, updated to use Vite bundles, and ensured correct paths for assets.

### 2. Styles Not Applying
- **Problem:** Login and welcome sections appeared unstyled or partially styled.
- **Cause:** HTML elements were missing required classes, and not all CSS was included after modularization.
- **Solution:** Matched HTML classes to CSS, restored all original styles, and modularized CSS into subfiles.

### 3. Vite Module/ESM Issues
- **Problem:** JS errors like ‚Äúexport declarations may only appear at top level of a module‚Äù and `window.validateEmail is not a function`.
- **Cause:** Vite bundles are ES modules; old UMD/global export patterns don‚Äôt work.
- **Solution:** Converted all JS to ES module syntax, used named imports/exports, and loaded scripts with `type="module"`.

### 4. JS Not Running or No Response
- **Problem:** No console logs, no validation, or no AJAX when clicking ‚ÄúSign In.‚Äù
- **Cause:** JS not running due to caching, wrong script path, or event listeners not attaching due to missing IDs/classes.
- **Solution:** Ensured correct script tag, hard refreshed, matched IDs, and added debug logs.

### 5. Validation Logic Too Strict
- **Problem:** Only valid emails were accepted; usernames were rejected.
- **Cause:** Validation function only allowed email format.
- **Solution:** Updated validation to allow both usernames and emails.

### 6. AJAX Path Incorrect
- **Problem:** AJAX requests went to `/app/api/login.php` (web root), causing 404s.
- **Cause:** Hardcoded path did not account for project subdirectory.
- **Solution:** Used dynamic base path logic in JS to always target the correct API endpoint.

### 7. Role-Based Redirection Incorrect
- **Problem:** All users were redirected to the admin dashboard, or to the wrong path.
- **Cause:** Redirection logic did not check user role or used hardcoded paths.
- **Solution:** API now returns user role; JS redirects based on role and uses dynamic base path.

### 8. PHP Warnings for Undefined Session Variables
- **Problem:** Warnings about undefined `$_SESSION['username']` and deprecated `htmlspecialchars()` usage.
- **Cause:** Session variable not set after login.
- **Solution:** API now sets `$_SESSION['username']` on successful login.

### 9. Modularization and Vite Integration
- **Problem:** Ensuring all CSS/JS is modular, imported, and bundled correctly.
- **Solution:** Broke CSS into logical submodules, updated `login.css` to import them, and rebuilt Vite assets after every change.

**NOTE**: For main views:
Do NOT set $contentFile = __FILE__;. Just include the layout and render your content directly.
For partial-based content:
Set $contentFile to a partial if you want to inject a specific file as the main content.

### ADDITIONAL TIPS ###
1. Centralize Routing and Access Control
Tip: Always handle routing and access control (session/role checks, redirects) at the very top of your main entry point (e.g., index.php), before any output or includes.
Why: Prevents "headers already sent" errors and ensures unauthorized users are redirected before any page content is sent.

2. Modularize and De-duplicate Code
Tip: Move shared helper functions (like is_admin(), is_agency()) to a single global file (e.g., session.php) and include them everywhere.
Why: Prevents function redeclaration errors and keeps logic consistent across the codebase.

3. Consistent Session Handling
Tip: Always call session_start() at the very top of every entry script (before any output).
Why: Ensures session variables are available and prevents session-related bugs.

4. Role Logic Should Match All Use Cases
Tip: When checking user roles, always account for all valid roles (e.g., both 'agency' and 'focal' for agency access).
Why: Prevents access issues for users with alternate but valid roles.

5. Router-based Navigation
Tip: Use a central router (e.g., index.php?page=...) for all navigation links, and avoid direct links to view files.
Why: Keeps navigation consistent, enables centralized access control, and prevents accidental bypassing of security checks.

6. Avoid Output Before Redirects
Tip: Never output anything (even whitespace) before calling header('Location: ...') for redirects.
Why: Prevents "headers already sent" warnings and ensures redirects work as expected.

7. Modular Asset Management with Vite
Tip: Bundle all CSS/JS assets with Vite, and import them through the layout or via dynamic injection.
Why: Ensures all assets are up-to-date, avoids 404s, and keeps asset management maintainable.

8. Use Dynamic Paths for AJAX/API
Tip: Always use dynamic base paths (not hardcoded /app/api/...) in JS for AJAX requests, especially if the app may be deployed in a subdirectory.
Why: Prevents 404 errors and makes the app portable.

9. Debugging: Log Session and Role Data
Tip: When debugging session or access issues, log session variables and user roles at key points (after login, on each request).
Why: Helps quickly identify where session data is lost or misinterpreted.

10. Remove Redundant Includes
Tip: Only include the files necessary for the current user role/page.
Why: Prevents function/class redeclaration errors and reduces unnecessary processing.

11. Keep Layouts and Views Separate
Tip: Output only page-specific content in view files; handle all global structure, asset imports, and navigation in the layout.
Why: Keeps code modular, maintainable, and easy to update.

12. Use Partials for Repeated UI
Tip: Extract repeated UI elements (headers, footers, navbars) into partials and include them in layouts.
Why: DRY principle‚Äîmakes updates easier and keeps code clean.

13. Document Bugs and Solutions
Tip: Maintain a bugs_tracker.md to log bugs and their solutions.
Why: Prevents repeated mistakes and speeds up future debugging.

14. Always Test with All User Roles
Tip: After changes, test with all possible user roles (admin, agency, focal, etc.) to ensure access and navigation work for everyone.
Why: Catches edge cases and prevents role-specific bugs.

15. Use DIR and Dynamic References
Tip: Use __DIR__ or dynamic path references in PHP includes and asset paths.
Why: Prevents path errors when moving files or deploying to different environments.

--- 