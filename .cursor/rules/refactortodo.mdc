---
description: this rule is applied when refactoring a module/file/section of the system with the best practice.
alwaysApply: false
---

# üöÄ Refactor Module Best Practices: To-Do Checklist

> **This file is the standard template/checklist for refactoring any module in this project. Whenever you see the instruction "refactor this module with best practices", use this as your context and workflow.**

---

## üìù To-Do Checklist: Refactor a Module (Detailed, with Vite & Unit Testing)

### 1. **Preparation & Analysis**
- [ ] Identify all files related to the module (views, partials, CSS, JS, PHP logic, AJAX/API, tests).
- [ ] Map the data flow: controller/handler ‚Üí model/helper ‚Üí view ‚Üí assets.
- [ ] List all dynamic features that may require AJAX or modular JS.

---

### 2. **Directory & File Structure Planning**
- [ ] Plan the new structure:
  - Main view file in `app/views/[section]/[module].php`
  - Partials in `app/views/[section]/partials/`
  - CSS in `assets/css/[section]/[module].css` (with subfiles if needed)
  - JS in `assets/js/[section]/[module].js` (split logic/DOM as needed)
  - Pure logic in `assets/js/[section]/[module]Logic.js`
  - AJAX/API endpoints in `app/ajax/` or `app/api/`
  - Unit tests in `tests/[section]/[module]Logic.test.js`
- [ ] Create or update a base layout (e.g., `app/views/layouts/base.php`) for dynamic asset injection.

---

### 3. **Move & Refactor Files**
- [ ] Move view and partial files to the new structure.
- [ ] Move and modularize CSS:
  - Main CSS imports subfiles using `@import`.
  - Example: `@import 'login/form.css';`
- [ ] Move and modularize JS:
  - Separate pure logic (validation, helpers) from DOM/event/AJAX code.
  - Import logic JS before DOM JS in the view.
- [ ] Move reusable PHP logic to `lib/` (e.g., models, helpers).
- [ ] Move AJAX/API endpoints to `app/ajax/` or `app/api/` and ensure they return JSON only.

---

### 4. **Implement Vite for Asset Bundling**
- [ ] Install Vite:  
  `npm install --save-dev vite`
- [ ] Create or update `vite.config.js`:
  - Define entry points for each module/page.
  - Example:
    ```js
    export default defineConfig({
      build: {
        rollupOptions: {
          input: {
            login: 'assets/js/admin/login.js',
            dashboard: 'assets/js/admin/dashboard.js',
            // Add more as needed
          },
          output: {
            entryFileNames: 'js/[name].bundle.js',
            assetFileNames: 'css/[name].bundle.css',
          }
        },
        outDir: 'dist',
        emptyOutDir: true,
      }
    });
    ```
- [ ] In each entry JS file, import the relevant CSS:
  ```js
  import '../../css/admin/login.css';
  ```
- [ ] Add build scripts to `package.json`:
  ```json
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  }
  ```
- [ ] Build assets for production:
  `npm run build`
- [ ] Reference bundled assets in your PHP views/layouts:
  ```php
  <link rel="stylesheet" href="/dist/js/login.bundle.css">
  <script src="/dist/js/login.bundle.js"></script>
  ```

---

### 5. **Refactor PHP Logic & Data Flow**
- [ ] Ensure all database operations are in models/helpers (`lib/`), not in views.
- [ ] Controllers/handlers fetch/process data and pass to views.
- [ ] Views only display data‚Äîno DB or business logic.

---

### 6. **AJAX & API Refactoring**
- [ ] AJAX endpoints return only data (JSON), not HTML.
- [ ] Write modular JS for AJAX in the relevant `assets/js/[section]/[module].js`.
- [ ] Use shared AJAX helpers if logic is reused across pages (e.g., `assets/js/ajax-helpers.js`).
- [ ] Handle errors gracefully in JS.

---

### 7. **Base Layout & Dynamic Asset Injection**
- [ ] Use a base layout (e.g., `layouts/base.php`) to inject per-page assets and content.
- [ ] Set `$cssBundle`, `$jsBundle`, `$contentFile` in each page and include the base layout.
- [ ] Add global assets in the base layout as needed.

---

### 8. **Unit Testing**
- [ ] Write or update unit tests for pure JS logic (e.g., `tests/admin/loginLogic.test.js`).
  - Example using Jest:
    ```js
    const { validateEmail, validatePassword } = require('../../assets/js/admin/loginLogic');
    test('valid email passes', () => {
      expect(validateEmail('test@example.com')).toBe(true);
    });
    ```
- [ ] Run tests and ensure all pass:
  `npm test`
- [ ] (Optional) Add PHP unit tests for backend logic if using PHPUnit.

---

### 9. **Validation & QA**
- [ ] Test all features and flows in the browser.
- [ ] Check for code duplication, unused files, and opportunities to modularize further.
- [ ] Ensure all code follows naming conventions and is well-documented.

---

### 10. **Documentation & Bug Tracking**
- [ ] Update `docs/project_structure_best_practices.md` with any new patterns or lessons learned.
- [ ] Log any bugs found/fixed in `docs/bugs_tracker.md`.

---

### 11. **Review & Optimize**
- [ ] Review the refactored module for maintainability, scalability, and performance.
- [ ] Optimize asset loading (load only what‚Äôs needed per page).
- [ ] Ensure security best practices are followed (e.g., input validation, output escaping).

---

## ‚≠êÔ∏è **Highlights & Usage**
- **This checklist is the gold standard for module refactoring in this project.**
- **Always use this as your context when you see the keyword:**
  > "refactor this module with best practices"
- **It covers:**
  - Modern file structure
  - Modular CSS/JS
  - Vite asset bundling
  - AJAX/API separation
  - Base layout usage
  - Unit testing
  - Documentation and bug tracking
- **Following this ensures maintainability, scalability, and professional quality.**

--- 