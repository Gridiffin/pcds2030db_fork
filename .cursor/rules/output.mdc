---
alwaysApply: true
---
- before doing anything complex such as implementing a feature or fixing a bug, document everything about your plan in a .md file in .github/implementations/[respective folder accorfing to the actions]. create a new folder if it doesnt exist.

- after every changes, update the .md file to reflect progress.

- treat the file as a to do list that you need to mark as done for each of the tasks listed

- always use GREP to gather all contexts across the codebase.

- please complete requests by the best possible solution that you can find. you dont need to wait for user's approval everytime.

- do NOT use /* ... (rest of your code as provided above) ... */ . you need to include the whole thing.

- follow up questions always use the previous files that we updated in the same context, unless i explicitly say "we move on to other file" that means we are still working on the same files.

- do not ask user to do scanning tasks, scan the file yourself and then you suggest the improvements

- FULLY AUTOMATE basic tasks such as scanning files etc

## Coding standards, domain knowledge, and preferences that AI should follow.

- Follow established coding standards and best practices.

- Keep codings simple, maintainable, not taking too much resources but still prioritizing UX.

- Ensure code is well-documented and maintainable (modular)

- Use meaningful variable and function names.

- always use the latest version of the libraries and frameworks.

- remember that this project is going to be hosted on cPanel.

- Use a consistent coding style throughout the project. Each page has header, footer and navbar. both header and footer contains critical references to css and js.

- remember to INCLUDE all files that is related to any functions that is specified. For example: if login functionality is being edited then scan the whole codebase to find anything related to login, including their styles.

- suggest improvements to the codebase, including refactoring, optimization, and performance enhancements.

- Ensure that all standard security concerns are considered.

- make sure that you understand how the files are referenced across the project. For example: in layouts/headers.php, there are base.css file that is referenced so you need to use these files as a centralized referencer file for all the css styles that is being used in the project. So if you are going to add a new css file, make sure to import them in base.css.

- whenever "continue" is used, you have to summarize the previous conversation history and then continue from there. So for example, if the previous conversation was about fixing a bug in the login functionality, you should summarize that conversation and then continue from there.

## Project Structure

- all css and js shouldnt be written inline. 
- put all css and js into their own folder in the assets/js or assets/css directory
- if the css and js are too long, modulate them into separate files.
- all files should have <300 lines of codes. 500 is the max and 800 is the ceiling that i accept (only for complex files). 
- if the page has too many elements, making the page partial might be a great way.
- **AJAX** if multiple pages share AJAX logic (like notifications, search, etc.), put that logic in a shared JS file and import it where needed.
- a file is accessed throuhg routing from index,php (example:/index.php?page=agency_initiative_view&id=...) make sure all files use this link as the reference links. 
- PROJECT_ROOT_PATH is used to reference a file outside the module of a certain file, __DIR__ is used to include files within partials/modules taht is in the same directory.
- Define PROJECT_ROOT_PATH if not already defined in any files that uses it, to ensure consistent path resolution across the project.

```php
if (!defined('PROJECT_ROOT_PATH')) {
    define('PROJECT_ROOT_PATH', dirname(dirname(dirname(dirname(__DIR__)))) . DIRECTORY_SEPARATOR);
}


IMPORTANT NOTE:  DO NOT INCLUDE BASE.PHP IN INDIVIDUAL FILE ANYMORE. base.php has been called in index.php and the hwhole system right now is using the consistent index routing.


## System Context

- ALWAYS refer to docs directory.

## Bug fixes

- everytime you found a bug, document it into the docs\bugs_tracker.md.
- include the date and time the bug is found and how it is fixed.
- next time you encounter a bug, you should refer to this .md file and try to find a similar bug that has been encountered. if no similar entry, create a new one and it goes on.