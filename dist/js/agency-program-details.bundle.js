/* empty css                         */class c{constructor(){this.programId=window.programId,this.isOwner=window.isOwner,this.currentUser=window.currentUser,this.APP_URL=window.APP_URL,this.init()}init(){this.bindEvents(),this.initializeComponents(),this.loadAdditionalData(),this.loadProgramStatus(),document.getElementById("edit-status-btn")?this.enableStatusEditing=!0:this.enableStatusEditing=!1}loadProgramStatus(){const t=this;fetch(`${this.APP_URL}/app/api/program_status.php?action=status&program_id=${this.programId}`).then(e=>e.json()).then(e=>{t.renderStatus(e)})}renderStatus(t){const e=document.getElementById("program-status-badge"),s=document.getElementById("hold-point-info"),o=document.getElementById("holdPointManagementSection");if(!e)return;let a=t.status||"active",n=a.charAt(0).toUpperCase()+a.slice(1).replace(/_/g," ");e.textContent=n;const i=this.getStatusInfo(a);e.className=`badge status-badge ${i.class} py-2 px-3`,e.innerHTML=`<i class="${i.icon} me-1"></i> ${n}`,a==="on_hold"&&t.hold_point?(s&&(s.innerHTML=`<i class='fas fa-pause-circle text-warning'></i> On Hold: <b>${t.hold_point.reason||""}</b> <span class='text-muted'>(${this.formatDate(t.hold_point.created_at)})</span> <span>${t.hold_point.remarks?" - "+t.hold_point.remarks:""}</span>`),o&&(o.style.display="block",document.getElementById("hold_reason").value=t.hold_point.reason||"",document.getElementById("hold_remarks").value=t.hold_point.remarks||"")):(s&&(s.innerHTML=""),o&&(o.style.display="none"))}bindEvents(){this.animateProgressBars(),this.bindTimelineEvents(),this.bindAttachmentEvents(),this.bindQuickActionEvents(),this.bindResponsiveEvents();const t=document.getElementById("edit-status-btn"),e=document.getElementById("view-status-history-btn");t&&this.enableStatusEditing&&t.addEventListener("click",()=>this.openEditStatusModal()),e&&e.addEventListener("click",()=>this.openStatusHistoryModal());const s=document.getElementById("updateHoldPointBtn");s&&s.addEventListener("click",()=>this.updateHoldPoint());const o=document.getElementById("endHoldPointBtn");o&&o.addEventListener("click",()=>this.endHoldPoint()),document.addEventListener("click",a=>{const n=a.target.closest(".delete-submission-btn");if(n){const i=n.getAttribute("data-submission-id");this.handleDeleteSubmission(i,n)}})}handleDeleteSubmission(t,e){t&&confirm("Are you sure you want to delete this submission? This action cannot be undone.")&&(e.disabled=!0,e.innerHTML='<i class="fas fa-spinner fa-spin"></i> Deleting...',fetch(`${this.APP_URL}/app/api/program_submissions.php`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify({submission_id:t})}).then(s=>s.json()).then(s=>{if(s.success){this.showToast("Deleted","Submission deleted successfully.","success");const o=e.closest(".modal");o&&typeof bootstrap<"u"&&bootstrap.Modal.getInstance(o)&&bootstrap.Modal.getInstance(o).hide(),setTimeout(()=>window.location.reload(),1200)}else this.showToast("Error",s.error||"Failed to delete submission.","danger"),e.disabled=!1,e.innerHTML='<i class="fas fa-trash"></i> Delete Submission'}).catch(()=>{this.showToast("Error","Failed to delete submission.","danger"),e.disabled=!1,e.innerHTML='<i class="fas fa-trash"></i> Delete Submission'}))}initializeComponents(){this.initTooltips(),this.initAnimations(),this.initCharts()}loadAdditionalData(){this.loadProgramStats(),this.loadTargetProgress()}animateProgressBars(){const t=document.querySelectorAll(".progress-bar"),e=new IntersectionObserver(s=>{s.forEach(o=>{if(o.isIntersecting){const a=o.target,n=a.style.width;a.style.width="0%",setTimeout(()=>{a.style.transition="width 1s ease-in-out",a.style.width=n},100),e.unobserve(a)}})});t.forEach(s=>e.observe(s))}bindTimelineEvents(){document.querySelectorAll(".timeline-item").forEach(e=>{e.addEventListener("click",s=>{s.target.tagName==="A"||s.target.closest("a")||this.toggleTimelineDetails(e)}),e.addEventListener("mouseenter",()=>{e.classList.add("timeline-item-hover")}),e.addEventListener("mouseleave",()=>{e.classList.remove("timeline-item-hover")})})}toggleTimelineDetails(t){const e=t.querySelector(".timeline-content");t.classList.contains("expanded")?(t.classList.remove("expanded"),e.style.maxHeight="60px"):(t.classList.add("expanded"),e.style.maxHeight=e.scrollHeight+"px")}bindAttachmentEvents(){document.querySelectorAll(".attachment-item").forEach(e=>{const s=e.querySelector(".attachment-actions .btn");s&&s.addEventListener("click",o=>{o.preventDefault(),this.handleAttachmentDownload(s.href,e)})})}handleAttachmentDownload(t,e){const s=e.querySelector(".attachment-actions .btn"),o=s.innerHTML;s.innerHTML='<i class="fas fa-spinner fa-spin"></i>',s.disabled=!0,setTimeout(()=>{window.open(t,"_blank"),s.innerHTML=o,s.disabled=!1,this.showToast("Download Started","File download has been initiated.","success")},500)}bindQuickActionEvents(){document.querySelectorAll(".card-body .btn").forEach(e=>{e.addEventListener("click",s=>{e.classList.add("btn-clicked"),setTimeout(()=>{e.classList.remove("btn-clicked")},200)})})}bindResponsiveEvents(){const t=()=>{window.innerWidth<768?this.enableMobileView():this.enableDesktopView()};window.addEventListener("resize",t),t()}enableMobileView(){document.querySelectorAll(".card").forEach(e=>{e.classList.add("mobile-optimized")})}enableDesktopView(){document.querySelectorAll(".card").forEach(e=>{e.classList.remove("mobile-optimized")})}initTooltips(){typeof bootstrap<"u"&&bootstrap.Tooltip&&[].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map(function(e){return new bootstrap.Tooltip(e)})}initAnimations(){const t=document.querySelectorAll(".card"),e=new IntersectionObserver(s=>{s.forEach(o=>{o.isIntersecting&&o.target.classList.add("animate-in")})},{threshold:.1});t.forEach(s=>e.observe(s))}initCharts(){}loadProgramStats(){this.programId&&fetch(`${this.APP_URL}/app/ajax/get_program_stats.php?program_id=${this.programId}`).then(t=>t.json()).then(t=>{t.success&&this.updateProgramStats(t.stats)}).catch(t=>{console.error("Error loading program stats:",t)})}updateProgramStats(t){if(document.querySelectorAll(".stat-item .badge"),t.total_submissions!==void 0){const s=document.querySelector(".stat-item:first-child .badge");s&&(s.textContent=t.total_submissions)}t.completion_rate!==void 0&&document.querySelectorAll(".target-progress .progress-bar").forEach(o=>{o.style.width=`${t.completion_rate}%`});const e=document.getElementById("last-activity-value");if(e)if(t.last_activity_date){const s=new Date(t.last_activity_date);e.textContent=isNaN(s.getTime())?"Never":s.toLocaleDateString("en-US",{year:"numeric",month:"short",day:"numeric"})}else e.textContent="Never"}loadTargetProgress(){this.programId&&fetch(`${this.APP_URL}/app/ajax/get_target_progress.php?program_id=${this.programId}`).then(t=>t.json()).then(t=>{t.success&&this.updateTargetProgress(t.progress)}).catch(t=>{console.error("Error loading target progress:",t)})}updateTargetProgress(t){t.forEach(e=>{const s=document.querySelector(`[data-target-id="${e.target_id}"]`);if(s){const o=s.querySelector(".progress-bar"),a=s.querySelector(".text-muted");o&&(o.style.width=`${e.percentage}%`),a&&(a.textContent=`${e.percentage}% Complete`)}})}showToast(t,e,s="info",o=5e3){typeof showToast=="function"&&showToast(t,e,s,o)}formatFileSize(t){if(t===0)return"0 Bytes";const e=1024,s=["Bytes","KB","MB","GB"],o=Math.floor(Math.log(t)/Math.log(e));return parseFloat((t/Math.pow(e,o)).toFixed(2))+" "+s[o]}formatDate(t){return new Date(t).toLocaleDateString("en-US",{year:"numeric",month:"short",day:"numeric"})}openEditStatusModal(){this.enableStatusEditing&&fetch(`${this.APP_URL}/app/api/program_status.php?action=status&program_id=${this.programId}`).then(t=>t.json()).then(t=>{this.renderEditStatusForm(t),new bootstrap.Modal(document.getElementById("editStatusModal")).show()})}renderEditStatusForm(t){if(!this.enableStatusEditing)return;const e=document.getElementById("edit-status-modal-body");if(!e)return;let s=t.status||"active",o=t.hold_point||{},n=`<form id='edit-status-form'>
            <div class='mb-3'>
                <label for='status-select' class='form-label'>Status</label>
                <select class='form-select' id='status-select' name='status'>
                    ${[{value:"active",label:"Active"},{value:"on_hold",label:"On Hold"},{value:"completed",label:"Completed"},{value:"delayed",label:"Delayed"},{value:"cancelled",label:"Cancelled"}].map(r=>`<option value='${r.value}' ${r.value===s?"selected":""}>${r.label}</option>`).join("")}
                </select>
            </div>
            <div class='mb-3'>
                <label for='status-remarks' class='form-label'>Remarks (optional)</label>
                <textarea class='form-control' id='status-remarks' name='remarks' rows='2'></textarea>
            </div>`;(s==="on_hold"||o)&&(n+=`<div id='hold-point-fields'>
                <div class='mb-3'>
                    <label for='hold-reason' class='form-label'>Hold Reason</label>
                    <input type='text' class='form-control' id='hold-reason' name='reason' value='${o.reason||""}' required />
                </div>
                <div class='mb-3'>
                    <label for='hold-remarks' class='form-label'>Hold Remarks (optional)</label>
                    <textarea class='form-control' id='hold-remarks' name='hold_remarks' rows='2'>${o.remarks||""}</textarea>
                </div>
            </div>`),n+=`<button type='submit' class='btn btn-primary'>Save</button>
        </form>`,e.innerHTML=n;const i=document.getElementById("status-select");i.addEventListener("change",r=>{const l=document.getElementById("hold-point-fields");if(r.target.value==="on_hold")if(l)l.style.display="";else{const d=document.createElement("div");d.id="hold-point-fields",d.innerHTML="<div class='mb-3'><label for='hold-reason' class='form-label'>Hold Reason</label><input type='text' class='form-control' id='hold-reason' name='reason' required /></div><div class='mb-3'><label for='hold-remarks' class='form-label'>Hold Remarks (optional)</label><textarea class='form-control' id='hold-remarks' name='hold_remarks' rows='2'></textarea></div>",i.parentNode.parentNode.appendChild(d)}else l&&(l.style.display="none")}),document.getElementById("edit-status-form").addEventListener("submit",r=>{r.preventDefault(),this.submitStatusForm()})}submitStatusForm(){if(!this.enableStatusEditing)return;const t=document.getElementById("edit-status-form"),e=new FormData(t);e.append("action","set_status"),e.append("program_id",this.programId),fetch(`${this.APP_URL}/app/api/program_status.php`,{method:"POST",body:e}).then(s=>s.json()).then(s=>{s.success?(this.loadProgramStatus(),bootstrap.Modal.getInstance(document.getElementById("editStatusModal")).hide(),this.showToast("Status Updated","Program status updated successfully.","success")):this.showToast("Error",s.error||"Failed to update status.","danger")})}openStatusHistoryModal(){fetch(`${this.APP_URL}/app/api/program_status.php?action=status_history&program_id=${this.programId}`).then(t=>t.json()).then(t=>{this.renderStatusHistory(t),new bootstrap.Modal(document.getElementById("statusHistoryModal")).show()})}renderStatusHistory(t){const e=document.getElementById("status-history-modal-body");if(!e)return;let s='<h6>Status Changes</h6><ul class="list-group mb-3">';(t.status_history||[]).forEach(o=>{s+=`<li class="list-group-item"><b>${o.status}</b> by User #${o.changed_by} <span class="text-muted">(${this.formatDate(o.changed_at)})</span> ${o.remarks?" - "+o.remarks:""}</li>`}),s+='</ul><h6>Hold Points</h6><ul class="list-group">',(t.hold_points||[]).forEach(o=>{s+=`<li class="list-group-item"><i class='fas fa-pause-circle text-warning'></i> <b>${o.reason}</b> (${this.formatDate(o.created_at)})${o.ended_at?" - Ended: "+this.formatDate(o.ended_at):""} ${o.remarks?" - "+o.remarks:""}</li>`}),s+="</ul>",e.innerHTML=s}}document.addEventListener("DOMContentLoaded",function(){new c});
