/* empty css                         */function y(s,n,a){window.showToast?window.showToast(s,n,a):(console.warn("showToast function not found. Implement or include a toast library."),alert(`${s}: ${n}`))}function L(s,n){const a=document.getElementById("program-status-badge"),u=document.getElementById("edit-status-btn"),b=document.getElementById("view-status-history-btn"),d=document.getElementById("editStatusModal"),r=document.getElementById("statusHistoryModal"),l=document.getElementById("edit-status-modal-body"),f=document.getElementById("status-history-modal-body"),p=document.getElementById("holdPointManagementSection");if(!u)return;const m=d?new bootstrap.Modal(d):null,c=r?new bootstrap.Modal(r):null,v={active:{label:"Active",class:"success",icon:"fas fa-play-circle"},on_hold:{label:"On Hold",class:"warning",icon:"fas fa-pause-circle"},completed:{label:"Completed",class:"primary",icon:"fas fa-check-circle"},delayed:{label:"Delayed",class:"danger",icon:"fas fa-exclamation-triangle"},cancelled:{label:"Cancelled",class:"secondary",icon:"fas fa-times-circle"}};function $(e){if(p&&(e.status==="on_hold"&&e.hold_point?(p.style.display="",document.getElementById("hold_reason").value=e.hold_point.reason||"",document.getElementById("hold_remarks").value=e.hold_point.remarks||""):p.style.display="none"),!a)return;const o=e.status||"active",t=v[o]||{label:o.charAt(0).toUpperCase()+o.slice(1).replace("_"," "),class:"secondary",icon:"fas fa-question-circle"};a.innerHTML=`<i class='${t.icon} me-1'></i>${t.label}`,a.className=`badge status-badge bg-${t.class} py-2 px-3`}function g(){fetch(`${n}?action=status&program_id=${s}`).then(e=>e.json()).then($).catch(e=>console.error("Failed to load status:",e))}u.addEventListener("click",()=>{fetch(`${n}?action=status&program_id=${s}`).then(e=>e.json()).then(e=>{I(e),m&&m.show()})}),b.addEventListener("click",()=>{fetch(`${n}?action=status_history&program_id=${s}`).then(e=>e.json()).then(e=>{H(e),c&&c.show()})});function I(e){const o=e.status||"active",t=e.hold_point||{};let M=`
            <form id='edit-status-form'>
                <div class='mb-3'>
                    <label for='status-select' class='form-label'>Status</label>
                    <select class='form-select' id='status-select' name='status'>
                        ${Object.keys(v).map(i=>({value:i,label:v[i].label})).map(i=>`<option value='${i.value}' ${i.value===o?"selected":""}>${i.label}</option>`).join("")}
                    </select>
                </div>
                <div id='hold-point-fields' style='display: ${o==="on_hold"?"block":"none"};'>
                    <div class='mb-3'>
                        <label for='hold-reason' class='form-label'>Hold Reason</label>
                        <input type='text' class='form-control' id='hold-reason' name='reason' value='${t.reason||""}' ${o==="on_hold"?"required":""} />
                    </div>
                    <div class='mb-3'>
                        <label for='hold-remarks' class='form-label'>Hold Point Remarks</label>
                        <textarea class='form-control' id='hold-remarks' name='hold_remarks' rows='2'>${t.remarks||""}</textarea>
                    </div>
                </div>
                <button type='submit' class='btn btn-primary mt-2'>Save</button>
            </form>`;l.innerHTML=M;const P=l.querySelector("#status-select"),k=l.querySelector("#hold-point-fields"),w=l.querySelector("#hold-reason");P.addEventListener("change",i=>{i.target.value==="on_hold"?(k.style.display="block",w.required=!0):(k.style.display="none",w.required=!1)}),l.querySelector("#edit-status-form").addEventListener("submit",i=>{i.preventDefault();const E=new FormData(i.target);E.append("action","set_status"),E.append("program_id",s),fetch(n,{method:"POST",body:E}).then(_=>_.json()).then(_=>{_.success&&(g(),m&&m.hide())})})}function H(e){let o='<h6>Status Changes</h6><ul class="list-group mb-3">';(e.status_history||[]).forEach(t=>{o+=`<li class="list-group-item"><b>${t.status}</b> by User #${t.changed_by} <span class="text-muted">(${t.changed_at})</span> ${t.remarks?" - "+t.remarks:""}</li>`}),o+='</ul><h6>Hold Points</h6><ul class="list-group">',(e.hold_points||[]).forEach(t=>{o+=`<li class="list-group-item"><b>${t.reason}</b> (${t.created_at})${t.ended_at?" - Ended: "+t.ended_at:""} ${t.remarks?" - "+t.remarks:""}</li>`}),o+="</ul>",f.innerHTML=o}const B=document.getElementById("updateHoldPointBtn"),S=document.getElementById("endHoldPointBtn");B&&B.addEventListener("click",function(){const e=document.getElementById("hold_reason").value;if(!e.trim()){y("Validation Error","Hold reason is required.","warning");return}const o=document.getElementById("hold_remarks").value,t=new FormData;t.append("action","hold_point"),t.append("program_id",s),t.append("reason",e),t.append("hold_remarks",o),this.disabled=!0,fetch(n,{method:"POST",body:t}).then(h=>h.json()).then(h=>{h.success?(g(),y("Success","Hold point updated.","success")):y("Error",h.error||"Update failed.","danger")}).finally(()=>this.disabled=!1)}),S&&S.addEventListener("click",function(){if(!confirm('Are you sure you want to end this hold point? The program status will become "Active".'))return;const e=new FormData;e.append("action","end_hold_point"),e.append("program_id",s),this.disabled=!0,fetch(n,{method:"POST",body:e}).then(o=>o.json()).then(o=>{o.success?(g(),y("Success","Hold point ended.","success")):y("Error",o.error||"Failed to end hold point.","danger")}).finally(()=>this.disabled=!1)}),g()}function x(){const s=document.getElementById("initiative_id"),n=document.getElementById("program_number"),a=document.getElementById("number-help-text"),u=document.getElementById("final-number-display"),b=document.getElementById("final-number-preview"),d=document.getElementById("number-validation"),r=document.getElementById("validation-message"),l=document.getElementById("restrict_editors"),f=document.getElementById("userSelectionSection");function p(){s.value?(n.disabled=!1,n.placeholder="Enter program number",a&&(a.textContent="Enter a number or leave blank for auto-generation"),u&&(u.style.display="block"),m()):(n.disabled=!0,n.placeholder="Select initiative first",a&&(a.textContent="Select an initiative to enable program numbering"),u&&(u.style.display="none"))}function m(){const c=n.value.trim();b&&(b.textContent=c||"Will be generated automatically")}s&&s.addEventListener("change",p),n&&n.addEventListener("input",()=>{const c=n.value.trim();c?/^[a-zA-Z0-9.]+$/.test(c)?(d&&(d.style.display="block"),r&&(r.className="text-success",r.textContent="Valid format")):(d&&(d.style.display="block"),r&&(r.className="text-danger",r.textContent="Invalid format. Use only letters, numbers, and dots.")):d&&(d.style.display="none"),m()}),l&&l.addEventListener("change",()=>{f&&(f.style.display=l.checked?"block":"none")}),p(),f&&l&&(f.style.display=l.checked?"block":"none")}function T(){const{programId:s,APP_URL:n}=window.PCDS_VARS||{};if(!s||!n){console.error("PCDS_VARS (programId, APP_URL) not found on window object.");return}const a=`${n}/app/api/program_status.php`;x(),L(s,a)}document.addEventListener("DOMContentLoaded",()=>{document.getElementById("editProgramForm")&&T()});
