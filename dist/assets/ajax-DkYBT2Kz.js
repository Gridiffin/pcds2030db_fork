class i{constructor(){this.baseUrl=this.getBaseUrl()}getBaseUrl(){const r=window.location.pathname.split("/"),t=r.findIndex(a=>a==="app");return t>=0?r.slice(0,t+1).join("/"):"/app"}async loadReportsForPeriod(o){try{const r=await fetch(`${this.baseUrl}/ajax/get_reports.php?period_id=${o}`,{method:"GET",headers:{"Content-Type":"application/json"}});if(!r.ok)throw new Error(`HTTP error! status: ${r.status}`);const t=await r.json();if(t.error)throw new Error(t.error);return t}catch(r){throw console.error("Error loading reports:",r),r}}async loadPublicReports(){try{const o=await fetch(`${this.baseUrl}/ajax/get_public_reports.php`,{method:"GET",headers:{"Content-Type":"application/json"}});if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);const r=await o.json();if(r.error)throw new Error(r.error);return r}catch(o){throw console.error("Error loading public reports:",o),o}}async downloadReport(o,r="pdf"){try{const t=await fetch(`${this.baseUrl}/ajax/download_report.php`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({report_id:o,file_type:r})});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const a=await t.blob(),s=window.URL.createObjectURL(a),e=document.createElement("a");return e.href=s,e.download=`report_${o}.${r}`,document.body.appendChild(e),e.click(),window.URL.revokeObjectURL(s),document.body.removeChild(e),!0}catch(t){throw console.error("Error downloading report:",t),t}}async getReportStatistics(){try{const o=await fetch(`${this.baseUrl}/ajax/get_report_stats.php`,{method:"GET",headers:{"Content-Type":"application/json"}});if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);const r=await o.json();if(r.error)throw new Error(r.error);return r}catch(o){throw console.error("Error loading report statistics:",o),o}}async requestReportGeneration(o){try{const r=await fetch(`${this.baseUrl}/ajax/generate_report.php`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!r.ok)throw new Error(`HTTP error! status: ${r.status}`);const t=await r.json();if(t.error)throw new Error(t.error);return t}catch(r){throw console.error("Error requesting report generation:",r),r}}async checkReportStatus(o){try{const r=await fetch(`${this.baseUrl}/ajax/check_report_status.php?job_id=${o}`,{method:"GET",headers:{"Content-Type":"application/json"}});if(!r.ok)throw new Error(`HTTP error! status: ${r.status}`);const t=await r.json();if(t.error)throw new Error(t.error);return t}catch(r){throw console.error("Error checking report status:",r),r}}handleError(o,r="operation"){console.error(`Error during ${r}:`,o),typeof window.showToast=="function"&&window.showToast("Error",`Failed to ${r}. Please try again.`,"danger")}showLoading(o){o&&(o.innerHTML='<div class="text-center p-3"><i class="fas fa-spinner fa-spin"></i> Loading...</div>')}hideLoading(o){if(o){const r=o.querySelector(".fa-spinner");r&&r.closest(".text-center").remove()}}}export{i as ReportsAjax};
